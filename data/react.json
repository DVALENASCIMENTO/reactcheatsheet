[
  {
  "number": 1,
  "emoji": "üì¶",
  "title": "Vari√°veis",
  "color": "amber",
  "commands": [
    {
      "cmd": "let x = 10;",
      "desc": "Declara uma vari√°vel com escopo de bloco. Pode ser atualizada posteriormente, mas n√£o redeclarada no mesmo escopo. Exemplo: let x = 10; x = 20; // V√°lido."
    },
    {
      "cmd": "const y = 20;",
      "desc": "Declara uma constante com escopo de bloco. Deve ser inicializada na declara√ß√£o e **n√£o pode ser reatribu√≠da**. Exemplo: const y = 20; y = 30; // Erro!"
    },
    {
      "cmd": "var z = 30;",
      "desc": "Declara uma vari√°vel com escopo de fun√ß√£o. Pode ser redeclarada e reatribu√≠da, mas seu uso √© desencorajado em c√≥digo moderno, pois ignora blocos (como if/for) e pode causar comportamentos inesperados."
    }
  ]
},

  {
  "number": 2,
  "emoji": "üî§",
  "title": "Tipos de Dados",
  "color": "yellow",
  "commands": [
    {
      "cmd": "let nome = \"Jo√£o\";",
      "desc": "Tipo de dado: **string**. Representa uma cadeia de caracteres. Deve estar entre aspas simples ou duplas. Pode conter texto, n√∫meros ou s√≠mbolos: exemplo ‚Äî `\"Jo√£o\"`, `'abc'`, `\"123\"`."
    },
    {
      "cmd": "let idade = 25;",
      "desc": "Tipo de dado: **number**. Representa tanto n√∫meros inteiros quanto de ponto flutuante. JavaScript n√£o diferencia entre int e float: `25`, `3.14`, `-7` s√£o todos numbers."
    },
    {
      "cmd": "let ativo = true;",
      "desc": "Tipo de dado: **boolean**. Representa apenas dois valores: `true` (verdadeiro) ou `false` (falso). Muito usado em condi√ß√µes e compara√ß√µes l√≥gicas."
    },
    {
      "cmd": "let nada = null;",
      "desc": "Tipo de dado: **null**. Representa a **aus√™ncia intencional de valor**. √â atribu√≠do manualmente para indicar que a vari√°vel est√° vazia ou sem valor √∫til."
    },
    {
      "cmd": "let indefinido;",
      "desc": "Tipo de dado: **undefined**. Quando uma vari√°vel √© declarada mas **n√£o inicializada**, seu valor padr√£o √© `undefined`. Tamb√©m ocorre quando uma fun√ß√£o n√£o retorna nada explicitamente."
    }
  ]
},
  {
  "number": 3,
  "emoji": "‚ûï",
  "title": "Operadores",
  "color": "red",
  "commands": [
    {
      "cmd": "+  -  *  /  %  **",
      "desc": "**Operadores aritm√©ticos**: usados para realizar opera√ß√µes matem√°ticas.\n\n- `+` adi√ß√£o\n- `-` subtra√ß√£o\n- `*` multiplica√ß√£o\n- `/` divis√£o\n- `%` m√≥dulo (resto da divis√£o)\n- `**` exponencia√ß√£o (ex: 2 ** 3 = 8)"
    },
    {
      "cmd": "==  ===  !=  !==  >  <  >=  <=",
      "desc": "**Operadores de compara√ß√£o**: comparam valores e retornam um booleano (true/false).\n\n- `==` igual (com convers√£o de tipo)\n- `===` estritamente igual (sem convers√£o)\n- `!=` diferente (com convers√£o)\n- `!==` estritamente diferente\n- `>` maior que\n- `<` menor que\n- `>=` maior ou igual\n- `<=` menor ou igual"
    },
    {
      "cmd": "&&  ||  !",
      "desc": "**Operadores l√≥gicos**:\n\n- `&&` (E l√≥gico): true se ambos os lados forem verdadeiros\n- `||` (OU l√≥gico): true se pelo menos um lado for verdadeiro\n- `!` (nega√ß√£o): inverte o valor booleano ‚Äî `!true` √© `false`"
    },
    {
      "cmd": "=  +=  -=  *=  /=",
      "desc": "**Operadores de atribui√ß√£o**:\n\n- `=` atribui√ß√£o b√°sica\n- `+=` soma e atribui (ex: `x += 2` √© o mesmo que `x = x + 2`)\n- `-=` subtrai e atribui\n- `*=` multiplica e atribui\n- `/=` divide e atribui"
    },
    {
      "cmd": "condi√ß√£o ? valor1 : valor2",
      "desc": "**Operador tern√°rio**: forma compacta de um `if/else`.\n\nSintaxe: `condi√ß√£o ? valorSeVerdadeiro : valorSeFalso`\n\nExemplo: `idade >= 18 ? 'Adulto' : 'Menor';`"
    }
  ]
},
  {
  "number": 4,
  "emoji": "üîÅ",
  "title": "Estruturas de Controle",
  "color": "blue",
  "commands": [
    {
      "cmd": "if (condi√ß√£o) { ... }",
      "desc": "Executa um bloco de c√≥digo **se** a condi√ß√£o for verdadeira.\n\nExemplo:\n```js\nif (idade >= 18) {\n  console.log('Maior de idade');\n}\n```"
    },
    {
      "cmd": "else if { ... }",
      "desc": "Permite adicionar **outras condi√ß√µes** caso a anterior n√£o seja satisfeita. Pode ser usado em conjunto com `if` e `else`.\n\nExemplo:\n```js\nif (x > 0) {\n  ...\n} else if (x < 0) {\n  ...\n}\n```"
    },
    {
      "cmd": "switch (valor) { case ... }",
      "desc": "Usado para comparar uma vari√°vel com **v√°rios valores poss√≠veis** (casos). √ötil quando h√° muitas condi√ß√µes baseadas no mesmo valor.\n\nExemplo:\n```js\nswitch (dia) {\n  case 'segunda': ... break;\n  case 'ter√ßa': ... break;\n  default: ...\n}\n```"
    },
    {
      "cmd": "for (let i = 0; i < 5; i++) {}",
      "desc": "**La√ßo for**: executa um bloco de c√≥digo um n√∫mero espec√≠fico de vezes. Possui tr√™s partes: inicializa√ß√£o, condi√ß√£o, incremento.\n\nExemplo:\n```js\nfor (let i = 0; i < 5; i++) {\n  console.log(i);\n}\n```"
    },
    {
      "cmd": "while (condi√ß√£o) {}",
      "desc": "**La√ßo while**: repete um bloco de c√≥digo **enquanto** a condi√ß√£o for verdadeira. √ötil quando o n√∫mero de repeti√ß√µes n√£o √© conhecido.\n\nExemplo:\n```js\nwhile (contador < 5) {\n  contador++;\n}\n```"
    },
    {
      "cmd": "do { ... } while (condi√ß√£o);",
      "desc": "**La√ßo do/while**: semelhante ao `while`, mas **executa pelo menos uma vez**, mesmo que a condi√ß√£o seja falsa desde o in√≠cio.\n\nExemplo:\n```js\ndo {\n  console.log('Executa pelo menos uma vez');\n} while (false);\n```"
    }
  ]
},
  {
  "number": 5,
  "emoji": "‚öô",
  "title": "Fun√ß√µes",
  "color": "green",
  "commands": [
    {
      "cmd": "function soma(a, b) { return a + b; }",
      "desc": "**Fun√ß√£o tradicional**: forma cl√°ssica de declarar uma fun√ß√£o em JavaScript. Pode ser chamada antes da declara√ß√£o (hoisting).\n\nExemplo:\n```js\nfunction soma(a, b) {\n  return a + b;\n}\n```"
    },
    {
      "cmd": "const soma = (a, b) => a + b;",
      "desc": "**Arrow Function** (fun√ß√£o de seta): forma mais curta de declarar fun√ß√µes, introduzida no ES6. N√£o tem seu pr√≥prio `this` e √© ideal para fun√ß√µes pequenas.\n\nExemplo:\n```js\nconst soma = (a, b) => a + b;\n```"
    },
    {
      "cmd": "const saudacao = function(nome) { return `Ol√°, ${nome}`; };",
      "desc": "**Fun√ß√£o an√¥nima**: uma fun√ß√£o **sem nome**, geralmente atribu√≠da a uma vari√°vel ou passada como argumento. Pode ser usada dinamicamente.\n\nExemplo:\n```js\nconst saudacao = function(nome) {\n  return `Ol√°, ${nome}`;\n};\n```"
    }
  ]
},
  {
  "number": 6,
  "emoji": "üçá",
  "title": "Arrays",
  "color": "purple",
  "commands": [
    {
      "cmd": "let frutas = ['ma√ß√£', 'banana'];",
      "desc": "**Declara√ß√£o de array**: um array √© uma estrutura de dados que armazena m√∫ltiplos valores em uma √∫nica vari√°vel. Pode conter qualquer tipo de dado.\n\nExemplo:\n```js\nlet frutas = ['ma√ß√£', 'banana'];\n```"
    },
    {
      "cmd": "frutas.push('uva');",
      "desc": "**Adiciona ao final**: o m√©todo `push()` insere um novo elemento **no final do array**.\n\nExemplo:\n```js\nfrutas.push('uva'); // ['ma√ß√£', 'banana', 'uva']\n```"
    },
    {
      "cmd": "frutas.pop();",
      "desc": "**Remove do final**: o m√©todo `pop()` remove o **√∫ltimo elemento** do array e o retorna.\n\nExemplo:\n```js\nfrutas.pop(); // remove 'banana'\n```"
    },
    {
      "cmd": "frutas.shift();",
      "desc": "**Remove do in√≠cio**: `shift()` remove o **primeiro item** do array e retorna esse valor.\n\nExemplo:\n```js\nfrutas.shift(); // remove 'ma√ß√£'\n```"
    },
    {
      "cmd": "frutas.includes('ma√ß√£');",
      "desc": "**Verifica se um valor existe** no array. Retorna `true` ou `false`.\n\nExemplo:\n```js\nfrutas.includes('ma√ß√£'); // true ou false\n```"
    },
    {
      "cmd": "frutas.map(item => item.toUpperCase());",
      "desc": "**Transforma os elementos** do array sem alterar o original. `map()` aplica uma fun√ß√£o a cada item e retorna um novo array.\n\nExemplo:\n```js\nconst maiusculas = frutas.map(item => item.toUpperCase());\n```"
    }
  ]
},
  {
  "number": 7,
  "emoji": "üß±",
  "title": "Objetos",
  "color": "gray",
  "commands": [
    {
      "cmd": "let pessoa = { nome: 'Ana', idade: 30 };",
      "desc": "**Cria√ß√£o de objeto**: um objeto em JavaScript √© uma cole√ß√£o de pares chave-valor. Permite agrupar dados relacionados, como nome e idade de uma pessoa.\n\nExemplo:\n```js\nlet pessoa = {\n  nome: 'Ana',\n  idade: 30\n};\n```"
    },
    {
      "cmd": "pessoa.nome",
      "desc": "**Acessa propriedade**: para acessar o valor de uma propriedade de um objeto, utiliza-se a nota√ß√£o de ponto (`objeto.propriedade`).\n\nExemplo:\n```js\nconsole.log(pessoa.nome); // 'Ana'\n```"
    },
    {
      "cmd": "const { nome, idade } = pessoa;",
      "desc": "**Desestrutura√ß√£o de objeto**: extrai valores diretamente das propriedades de um objeto e os atribui a vari√°veis com o mesmo nome.\n\nExemplo:\n```js\nconst { nome, idade } = pessoa;\nconsole.log(nome); // 'Ana'\n```"
    }
  ]
},
  {
  "number": 8,
  "emoji": "üèõ",
  "title": "Classes",
  "color": "teal",
  "commands": [
    {
      "cmd": "class Pessoa { constructor(nome) { this.nome = nome; } }",
      "desc": "**Declara√ß√£o de classe**: a palavra-chave `class` define uma estrutura que serve como molde para criar objetos. O m√©todo `constructor` √© executado automaticamente na cria√ß√£o de uma nova inst√¢ncia.\n\nExemplo:\n```js\nclass Pessoa {\n  constructor(nome) {\n    this.nome = nome;\n  }\n}\n```"
    },
    {
      "cmd": "new Pessoa('Jo√£o')",
      "desc": "**Instancia√ß√£o de objeto**: usa-se a palavra-chave `new` para criar um novo objeto baseado na classe definida. O `constructor` √© chamado com os par√¢metros fornecidos.\n\nExemplo:\n```js\nconst p1 = new Pessoa('Jo√£o');\nconsole.log(p1.nome); // 'Jo√£o'\n```"
    }
  ]
},
  {
  "number": 9,
  "emoji": "üßæ",
  "title": "JSON",
  "color": "orange",
  "commands": [
    {
      "cmd": "JSON.parse(string)",
      "desc": "**Converte uma string JSON em um objeto JavaScript real.** √ötil ao receber dados de uma API ou arquivo.\n\nA string deve estar no formato JSON v√°lido (chaves, aspas duplas, etc).\n\nExemplo:\n```js\nconst json = '{\"nome\": \"Carlos\", \"idade\": 40}';\nconst obj = JSON.parse(json);\nconsole.log(obj.nome); // 'Carlos'\n```"
    },
    {
      "cmd": "JSON.stringify(obj)",
      "desc": "**Converte um objeto JavaScript em uma string JSON.** √ötil para salvar dados, enviar para uma API ou armazenar em localStorage.\n\nExemplo:\n```js\nconst obj = { nome: 'Carlos', idade: 40 };\nconst json = JSON.stringify(obj);\nconsole.log(json); // '{\"nome\":\"Carlos\",\"idade\":40}'\n```"
    }
  ]
},
  {
  "number": 10,
  "emoji": "üìë",
  "title": "DOM",
  "color": "violet",
  "commands": [
    {
      "cmd": "document.getElementById('id')",
      "desc": "**Seleciona um elemento do HTML pelo atributo `id`.** Retorna o primeiro elemento que possuir o ID fornecido. Muito usado para manipula√ß√£o direta de elementos espec√≠ficos.\n\nExemplo:\n```js\nconst titulo = document.getElementById('meuTitulo');\n```"
    },
    {
      "cmd": "element.textContent = 'Texto';",
      "desc": "**Modifica o conte√∫do textual de um elemento HTML.** Substitui todo o texto dentro do elemento (sem interpretar HTML).\n\nExemplo:\n```js\ndocument.getElementById('mensagem').textContent = 'Ol√°, mundo!';\n```"
    },
    {
      "cmd": "element.classList.add('classe')",
      "desc": "**Adiciona uma classe CSS ao elemento HTML.** Isso permite aplicar estilos ou comportamentos definidos em CSS ou JS dinamicamente.\n\nExemplo:\n```js\nbotao.classList.add('ativo');\n```"
    }
  ]
},
  {
  "number": 11,
  "emoji": "üñ±",
  "title": "Eventos",
  "color": "pink",
  "commands": [
    {
      "cmd": "element.addEventListener('click', () => {...})",
      "desc": "**Adiciona um listener de evento**: este m√©todo permite monitorar e executar uma fun√ß√£o quando um evento espec√≠fico ocorre em um elemento, como um clique. √â fundamental para interatividade em p√°ginas web.\n\nExemplo:\n```js\nconst botao = document.getElementById('meuBotao');\nbotao.addEventListener('click', () => {\n  console.log('Bot√£o foi clicado!');\n});\n```"
    }
  ]
},
  {
  "number": 12,
  "emoji": "üîÑ",
  "title": "Promises & Fetch",
  "color": "cyan",
  "commands": [
    {
      "cmd": "fetch(url).then(res => res.json())",
      "desc": "**Executa uma requisi√ß√£o HTTP utilizando o m√©todo `fetch()`.**\n\nEsse m√©todo retorna uma **Promise** e permite acessar APIs. O `res.json()` converte a resposta (response) para objeto JSON.\n\nExemplo:\n```js\nfetch('https://api.exemplo.com/dados')\n  .then(res => res.json())\n  .then(data => console.log(data))\n  .catch(err => console.error(err));\n```"
    },
    {
      "cmd": "new Promise((resolve, reject) => {...})",
      "desc": "**Cria uma Promise manualmente.**\n\nUma **Promise** representa uma opera√ß√£o ass√≠ncrona que pode ser finalizada com sucesso (`resolve`) ou com erro (`reject`).\n\nExemplo:\n```js\nconst promessa = new Promise((resolve, reject) => {\n  const sucesso = true;\n  if (sucesso) {\n    resolve('Tudo certo!');\n  } else {\n    reject('Algo deu errado.');\n  }\n});\n\npromessa.then(msg => console.log(msg)).catch(erro => console.error(erro));\n```"
    }
  ]
},
  {
  "number": 13,
  "emoji": "‚è≥",
  "title": "Async/Await",
  "color": "yellow",
  "commands": [
    {
      "cmd": "async function load() { await fetch(url); }",
      "desc": "**Declara uma fun√ß√£o ass√≠ncrona com `async` e usa `await` para aguardar o resultado de uma Promise.**\n\nO `async` transforma a fun√ß√£o em uma que retorna uma Promise. O `await` pausa a execu√ß√£o at√© que a Promise seja resolvida, simplificando o uso de chamadas ass√≠ncronas como `fetch`.\n\nExemplo:\n```js\nasync function load() {\n  try {\n    const resposta = await fetch('https://api.exemplo.com');\n    const dados = await resposta.json();\n    console.log(dados);\n  } catch (erro) {\n    console.error('Erro ao carregar:', erro);\n  }\n}\n```"
    }
  ]
},
  {
  "number": 14,
  "emoji": "‚ú®",
  "title": "ES6+ Features",
  "color": "green",
  "commands": [
    {
      "cmd": "`Ol√°, ${nome}`",
      "desc": "**Template Literal**: permite interpolar vari√°veis dentro de strings usando a sintaxe `${vari√°vel}` e crase (`` ` ``) em vez de aspas.\n\nExemplo:\n```js\nconst nome = 'Maria';\nconsole.log(`Ol√°, ${nome}`); // Ol√°, Maria\n```"
    },
    {
      "cmd": "...array",
      "desc": "**Operador Spread/Rest**:\n- **Spread (`...`)**: expande os elementos de um array ou objeto.\n- **Rest (`...`)**: agrupa argumentos ou propriedades restantes.\n\nExemplos:\n```js\n// Spread\nconst nums = [1, 2, 3];\nconst mais = [...nums, 4];\n\n// Rest\nfunction soma(...valores) {\n  return valores.reduce((a, b) => a + b);\n}\n```"
    },
    {
      "cmd": "function falar(nome = 'Visitante') {}",
      "desc": "**Par√¢metros padr√£o**: define valores padr√£o para par√¢metros de fun√ß√£o. Se o argumento n√£o for passado, o valor padr√£o ser√° usado.\n\nExemplo:\n```js\nfunction falar(nome = 'Visitante') {\n  console.log(`Ol√°, ${nome}`);\n}\n\nfalar(); // Ol√°, Visitante\n```"
    }
  ]
},
  {
  "number": 15,
  "emoji": "üíæ",
  "title": "Local Storage",
  "color": "blue",
  "commands": [
    {
      "cmd": "localStorage.setItem('chave', 'valor')",
      "desc": "**Armazena um valor no navegador**. Os dados persistem mesmo ap√≥s o fechamento da aba ou do navegador. Tanto a chave quanto o valor devem ser strings.\n\nExemplo:\n```js\nlocalStorage.setItem('nome', 'Jo√£o');\n```"
    },
    {
      "cmd": "localStorage.getItem('chave')",
      "desc": "**L√™ um valor salvo no Local Storage** com base na chave especificada. Retorna `null` se a chave n√£o existir.\n\nExemplo:\n```js\nconst nome = localStorage.getItem('nome');\nconsole.log(nome); // 'Jo√£o'\n```"
    },
    {
      "cmd": "localStorage.removeItem('chave')",
      "desc": "**Remove uma chave e seu valor correspondente do armazenamento local.**\n\nExemplo:\n```js\nlocalStorage.removeItem('nome');\n```"
    }
  ]
},
  {
  "number": 16,
  "emoji": "üìÖ",
  "title": "Datas",
  "color": "brown",
  "commands": [
    {
      "cmd": "let hoje = new Date();",
      "desc": "**Cria um novo objeto de data e hora.**\nO construtor `new Date()` gera a data e hora atual do sistema no momento da execu√ß√£o.\n\nExemplo:\n```js\nlet hoje = new Date();\nconsole.log(hoje); // ex: Wed May 15 2025 10:30:00 GMT-0300\n```"
    },
    {
      "cmd": "hoje.getFullYear()",
      "desc": "**Retorna o ano com 4 d√≠gitos da data armazenada no objeto.**\n√ötil para obter o ano atual ou de qualquer data definida.\n\nExemplo:\n```js\nconst ano = hoje.getFullYear();\nconsole.log(ano); // ex: 2025\n```"
    }
  ]
},
  {
  "number": 17,
  "emoji": "üîç",
  "title": "Console & Debug",
  "color": "gray",
  "commands": [
    {
      "cmd": "console.log('Mensagem')",
      "desc": "**Exibe uma mensagem no console do navegador.**\nUsado para depura√ß√£o, verificando valores e fluxo do c√≥digo.\n\nExemplo:\n```js\nconsole.log('Iniciando script...');\n```"
    },
    {
      "cmd": "console.error('Erro!')",
      "desc": "**Mostra uma mensagem de erro no console**, geralmente com destaque em vermelho. Muito √∫til para indicar falhas espec√≠ficas em execu√ß√µes ou chamadas.\n\nExemplo:\n```js\nconsole.error('Algo deu errado!');\n```"
    },
    {
      "cmd": "console.table([{}])",
      "desc": "**Exibe dados tabulares no console.** Ideal para visualizar arrays de objetos ou objetos com v√°rias propriedades de forma organizada.\n\nExemplo:\n```js\nconst usuarios = [\n  { nome: 'Ana', idade: 30 },\n  { nome: 'Jo√£o', idade: 25 }\n];\nconsole.table(usuarios);\n```"
    }
  ]
}
]
