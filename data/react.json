[
  {
    "number": 1,
    "emoji": "‚öõ",
    "title": "Fundamentos de JavaScript (Pr√©-Requisitos)",
    "color": "amber",
    "commands": [
      {
        "cmd": "Vari√°veis e tipos de dados",
        "desc": "Aprenda como declarar vari√°veis em JavaScript usando `let` e `const` e entenda quando utilizar cada um. Explore tamb√©m os tipos primitivos: `string` (texto), `number` (n√∫meros), `boolean` (verdadeiro ou falso), `undefined` (valor indefinido), `null` (aus√™ncia intencional de valor), `symbol` (identificadores √∫nicos) e `bigint` (para n√∫meros muito grandes). Esses conceitos s√£o fundamentais para a estrutura√ß√£o do seu c√≥digo."
      },
      {
        "cmd": "Fun√ß√µes e escopos",
        "desc": "Saiba como declarar fun√ß√µes usando a palavra-chave `function` ou como fun√ß√µes an√¥nimas (`arrow functions`). Entenda o conceito de escopo ‚Äî onde as vari√°veis s√£o vis√≠veis e acess√≠veis ‚Äî e as diferen√ßas entre escopo global e local, al√©m de como evitar conflitos ou vazamentos de vari√°veis."
      },
      {
        "cmd": "Arrays e objetos",
        "desc": "Os arrays permitem armazenar listas de dados e os objetos permitem estruturar dados em pares de chave e valor. Pratique m√©todos essenciais como `push`, `map`, `filter` e `reduce` para manipular arrays, e saiba como acessar e modificar propriedades e m√©todos dos objetos para organizar melhor seus dados."
      },
      {
        "cmd": "Promises e async/await",
        "desc": "JavaScript √© ass√≠ncrono, ou seja, pode lidar com tarefas que demoram para responder (como chamadas de API). Aprenda a trabalhar com `Promises` para lidar com esses fluxos ass√≠ncronos, e como simplificar essa leitura usando a sintaxe `async/await` para escrever c√≥digo mais claro e eficiente."
      },
      {
        "cmd": "Manipula√ß√£o de DOM",
        "desc": "O DOM (Document Object Model) representa a estrutura HTML de uma p√°gina. Aprenda a acessar e alterar elementos usando `document.querySelector`, `innerHTML`, `classList`, entre outros m√©todos. Essa manipula√ß√£o √© essencial para interatividade e dinamicidade em p√°ginas web."
      },
      {
        "cmd": "M√≥dulos ES6+",
        "desc": "Organize melhor seu projeto utilizando `import` e `export` para dividir e reutilizar trechos de c√≥digo em arquivos separados. Essa modulariza√ß√£o aumenta a legibilidade e facilita a manuten√ß√£o de grandes aplica√ß√µes."
      }
    ]
  },
  {
    "number": 2,
    "emoji": "üü†",
    "title": "Primeiros Passos com React",
    "color": "orange",
    "commands": [
      {
        "cmd": "Conceito de SPA",
        "desc": "Uma Single Page Application (SPA) √© um aplicativo web que carrega apenas uma vez e atualiza o conte√∫do dinamicamente sem recarregar a p√°gina inteira. Isso resulta em navega√ß√£o mais r√°pida, melhorando significativamente a experi√™ncia do usu√°rio."
      },
      {
        "cmd": "O que √© React e por que us√°-lo",
        "desc": "React √© uma biblioteca JavaScript criada pelo Facebook, usada para construir interfaces de usu√°rio de forma reativa. Ele utiliza componentes reutiliz√°veis que melhoram a manuten√ß√£o, escalabilidade e performance das aplica√ß√µes."
      },
      {
        "cmd": "Instala√ß√£o e cria√ß√£o de projeto",
        "desc": "Configure rapidamente um projeto React usando ferramentas como `npx create-react-app` ou `npm create vite@latest`. Essas ferramentas j√° fornecem estrutura b√°sica, scripts de desenvolvimento e recursos essenciais para come√ßar a codar sem preocupa√ß√µes iniciais."
      },
      {
        "cmd": "Estrutura de pastas e arquivos",
        "desc": "Entenda como um projeto React √© organizado: a pasta `public` para arquivos est√°ticos (HTML, imagens), a pasta `src` para o c√≥digo-fonte (componentes, estilos), o `index.html` como ponto de entrada e o `App.js` como componente principal."
      },
      {
        "cmd": "JSX",
        "desc": "JSX √© uma extens√£o de sintaxe que permite escrever HTML dentro do JavaScript, tornando a constru√ß√£o de componentes visuais mais intuitiva. Ele √© convertido para JavaScript puro por ferramentas como Babel, mantendo o projeto compat√≠vel com os navegadores."
      }
    ]
  },
  {
  "number": 2.5,
  "emoji": "üõ†Ô∏è",
  "title": "Ferramentas de Build e Bundling",
  "color": "gray",
  "commands": [
    {
      "cmd": "Webpack",
      "desc": "Empacotador de m√≥dulos robusto, padr√£o de mercado para aplica√ß√µes React. Permite configura√ß√µes detalhadas, otimiza√ß√£o, minifica√ß√£o e integra√ß√£o com loaders (como Babel) e plugins. Ideal para projetos complexos e com muitas depend√™ncias.",
      "link": "https://dvalenascimento.github.io/webpackcheatsheet/"
    },
    {
      "cmd": "Vite",
      "desc": "Ferramenta moderna e ultrarr√°pida para desenvolvimento de aplica√ß√µes. Usa ESBuild para transformar c√≥digo instantaneamente, e oferece build final otimizado com Rollup. √ìtimo para come√ßar novos projetos React rapidamente.",
      "link": "https://dvalenascimento.github.io/vitecheatsheet/"
    },
    {
      "cmd": "Parcel",
      "desc": "Empacotador que funciona sem configura√ß√£o inicial (zero-config). Simples e r√°pido para projetos de pequeno e m√©dio porte. Detecta automaticamente arquivos como React, TypeScript, imagens, etc."
    },
    {
      "cmd": "Rollup",
      "desc": "Focado em bundles minimalistas, usado principalmente em bibliotecas React ou quando √© preciso um bundle final muito pequeno. Tem tree-shaking eficiente e gera pacotes otimizados."
    },
    {
      "cmd": "Escolha certa para seu projeto",
      "desc": "Para projetos React de produ√ß√£o ou empresas, Webpack e Vite s√£o as escolhas principais. Para bibliotecas e componentes compartilh√°veis, Rollup √© ideal. Parcel √© √≥timo para quem quer come√ßar r√°pido e simples!"
    }
  ]
},
  {
    "number": 3,
    "emoji": "üîµ",
    "title": "Componentes",
    "color": "blue",
    "commands": [
      {
        "cmd": "Function Components",
        "desc": "Crie interfaces em React usando fun√ß√µes JavaScript que retornam JSX. Esses componentes s√£o f√°ceis de entender, reutilizar e facilitam a composi√ß√£o de telas mais complexas."
      },
      {
        "cmd": "Props",
        "desc": "As `props` (propriedades) s√£o dados que voc√™ pode passar para componentes filhos, tornando-os din√¢micos e reutiliz√°veis. Elas s√£o a base para a comunica√ß√£o entre componentes em React."
      },
      {
        "cmd": "useState",
        "desc": "O hook `useState` permite criar estados locais em componentes de fun√ß√£o. Ele retorna um par: o valor atual do estado e uma fun√ß√£o que o atualiza, disparando um novo render autom√°tico do componente."
      },
      {
        "cmd": "Eventos",
        "desc": "React usa eventos semelhantes ao JavaScript puro, mas com nomes em camelCase, como `onClick` e `onChange`. Esses eventos permitem capturar intera√ß√µes do usu√°rio e atualizar o estado ou a interface."
      },
      {
        "cmd": "Listas e chaves",
        "desc": "Para renderizar listas de dados, use o m√©todo `map`. Cada elemento renderizado deve ter uma `key` √∫nica para que o React possa identificar e atualizar itens de forma eficiente, evitando problemas de performance."
      }
    ]
  },
  {
    "number": 4,
    "emoji": "üü£",
    "title": "Hooks Essenciais",
    "color": "purple",
    "commands": [
      {
        "cmd": "useState",
        "desc": "Retorna um par: o valor atual do estado e uma fun√ß√£o para atualiz√°-lo. Essencial para armazenar valores din√¢micos dentro de componentes de fun√ß√£o."
      },
      {
        "cmd": "useEffect",
        "desc": "Permite executar efeitos colaterais (como requisi√ß√µes de dados, anima√ß√µes ou altera√ß√µes no DOM) ap√≥s a renderiza√ß√£o do componente. Ele substitui m√©todos de ciclo de vida em componentes de classe."
      },
      {
        "cmd": "Regras dos Hooks",
        "desc": "Hooks devem ser chamados apenas no topo de componentes de fun√ß√£o ou em hooks customizados. Eles n√£o devem ser usados dentro de loops, condicionais ou fun√ß√µes aninhadas, garantindo que a ordem de execu√ß√£o seja sempre a mesma."
      }
    ]
  },
  {
    "number": 5,
    "emoji": "üü°",
    "title": "Estiliza√ß√£o",
    "color": "yellow",
    "commands": [
      {
        "cmd": "CSS Modules",
        "desc": "Permite escopar estilos CSS a um componente espec√≠fico, evitando conflitos de nome de classes em grandes projetos. Cada arquivo CSS gera um objeto de classes com nomes √∫nicos para uso em JSX."
      },
      {
        "cmd": "Styled Components",
        "desc": "Uma biblioteca para escrever CSS dentro de JavaScript, criando componentes estilizados e din√¢micos. Ela facilita a aplica√ß√£o de temas e a composi√ß√£o de estilos, melhorando a manuten√ß√£o do c√≥digo."
      },
      {
        "cmd": "Tailwind CSS",
        "desc": "Um framework utilit√°rio que oferece classes pr√©-definidas para construir layouts responsivos e consistentes. Ele economiza tempo, pois evita a escrita de CSS do zero e garante consist√™ncia visual."
      },
      {
        "cmd": "Component libraries",
        "desc": "Bibliotecas como Material UI ou Ant Design oferecem componentes visuais prontos, consistentes e personaliz√°veis, acelerando o desenvolvimento e garantindo uma experi√™ncia de usu√°rio profissional."
      }
    ]
  },
  {
    "number": 6,
    "emoji": "üü†",
    "title": "Gerenciamento de Estado Global",
    "color": "orange",
    "commands": [
      {
        "cmd": "Context API",
        "desc": "Recurso do React que permite compartilhar dados entre m√∫ltiplos componentes sem passar props manualmente por todos eles (props drilling). Ideal para dados globais como tema, idioma ou usu√°rio logado."
      },
      {
        "cmd": "Redux",
        "desc": "Biblioteca externa que oferece um fluxo de dados previs√≠vel usando actions e reducers. Ideal para gerenciar estados complexos em aplica√ß√µes grandes, mantendo consist√™ncia e facilitando o debug."
      },
      {
        "cmd": "Alternativas modernas",
        "desc": "Bibliotecas como Zustand e Recoil surgiram para oferecer solu√ß√µes de estado global mais leves, com APIs mais simples e menor sobrecarga para projetos que n√£o precisam da complexidade do Redux."
      }
    ]
  },
  {
    "number": 7,
    "emoji": "üü°",
    "title": "Consumo de APIs",
    "color": "yellow",
    "commands": [
      {
        "cmd": "Fetch e Axios",
        "desc": "Duas formas principais de fazer requisi√ß√µes HTTP em JavaScript. `fetch` √© nativo e simples, enquanto `axios` tem recursos avan√ßados como interceptadores, suporte a requisi√ß√µes simult√¢neas e melhores mensagens de erro."
      },
      {
        "cmd": "useEffect + useState",
        "desc": "Combine esses hooks para buscar dados de APIs: useEffect para acionar a busca no momento certo e useState para armazenar o resultado, atualizando a interface automaticamente."
      },
      {
        "cmd": "Tratamento de erros e loading",
        "desc": "Implemente estados para controlar a exibi√ß√£o de mensagens de carregamento (`loading`) e lidar com falhas de rede (`error`), melhorando a experi√™ncia do usu√°rio em casos de demora ou erros na conex√£o."
      }
    ]
  },
  {
    "number": 8,
    "emoji": "üî¥",
    "title": "Rotas (React Router)",
    "color": "red",
    "commands": [
      {
        "cmd": "Instala√ß√£o e configura√ß√£o",
        "desc": "Use `npm install react-router-dom` ou `yarn add react-router-dom` para instalar a biblioteca de roteamento e configure o `BrowserRouter` no topo da √°rvore de componentes para ativar o sistema de rotas."
      },
      {
        "cmd": "Componentes principais",
        "desc": "Use os componentes `<Routes>` e `<Route>` para definir quais componentes devem ser exibidos em quais URLs, permitindo navega√ß√£o fluida e declarativa no app."
      },
      {
        "cmd": "Roteamento din√¢mico",
        "desc": "Use `useParams` para capturar par√¢metros da URL (como IDs) e `useSearchParams` para manipular buscas e filtros na barra de endere√ßos, personalizando a experi√™ncia do usu√°rio."
      },
      {
        "cmd": "Rotas privadas",
        "desc": "Proteja √°reas sens√≠veis do app criando componentes de autentica√ß√£o que redirecionam usu√°rios n√£o logados ou sem permiss√µes, garantindo seguran√ßa e controle de acesso."
      }
    ]
  },
  {
    "number": 9,
    "emoji": "üîµ",
    "title": "Componentes Avan√ßados e Padr√µes",
    "color": "blue",
    "commands": [
      {
        "cmd": "Refs e useRef",
        "desc": "Use o `useRef` para criar refer√™ncias a elementos do DOM (foco, rolagem) ou armazenar valores persistentes entre renderiza√ß√µes sem disparar re-renderiza√ß√µes."
      },
      {
        "cmd": "Memoization",
        "desc": "Use t√©cnicas como `React.memo`, `useMemo` e `useCallback` para otimizar a performance do app, evitando renderiza√ß√µes desnecess√°rias de componentes ou c√°lculos complexos em cada atualiza√ß√£o."
      },
      {
        "cmd": "Render Props e HOC",
        "desc": "Padr√µes que permitem compartilhar l√≥gica entre componentes: Render Props passa fun√ß√µes como filhos, e HOC (Higher Order Component) envolve componentes para estender suas funcionalidades."
      },
      {
        "cmd": "Lazy loading",
        "desc": "Use `React.lazy` e `<Suspense>` para carregar componentes sob demanda, diminuindo o tamanho do bundle inicial e acelerando o carregamento do app para o usu√°rio."
      }
    ]
  },
  {
    "number": 10,
    "emoji": "‚ö´",
    "title": "Testes",
    "color": "black",
    "commands": [
      {
        "cmd": "Jest + React Testing Library",
        "desc": "Ferramentas l√≠deres para testes unit√°rios e de integra√ß√£o em React. O Jest executa os testes e fornece ferramentas de mock e asser√ß√£o, enquanto a React Testing Library foca na simula√ß√£o de intera√ß√µes reais do usu√°rio."
      },
      {
        "cmd": "Testes de componentes",
        "desc": "Assegure que componentes renderizam corretamente e respondem como esperado a intera√ß√µes (cliques, mudan√ßas de input, etc.)."
      },
      {
        "cmd": "Testes de integra√ß√£o",
        "desc": "Valide fluxos mais amplos (como um formul√°rio completo), garantindo que diferentes partes do app trabalham juntas como deveriam em um cen√°rio real."
      }
    ]
  },
  {
    "number": 11,
    "emoji": "‚ö°",
    "title": "Performance e Otimiza√ß√£o",
    "color": "yellow",
    "commands": [
      {
        "cmd": "Code splitting",
        "desc": "Quebre o c√≥digo do aplicativo em peda√ßos menores usando `import()` din√¢mico. Isso faz com que partes do app sejam carregadas apenas quando necess√°rias, reduzindo o tempo de carregamento inicial e melhorando a experi√™ncia do usu√°rio."
      },
      {
        "cmd": "Evitar re-renderiza√ß√µes",
        "desc": "Use `React.memo` para componentes que recebem as mesmas props e `useMemo`/`useCallback` para memorizar valores e fun√ß√µes. Essas t√©cnicas evitam que partes da interface sejam re-renderizadas sem necessidade, economizando recursos."
      },
      {
        "cmd": "Otimiza√ß√£o de renderiza√ß√µes",
        "desc": "Estruture bem seus componentes, evite c√°lculos pesados dentro do render e mantenha a √°rvore de componentes enxuta. Isso ajuda o React a atualizar a interface de forma mais r√°pida e eficiente."
      }
    ]
  },
  {
    "number": 12,
    "emoji": "üöÄ",
    "title": "Deploy e Produ√ß√£o",
    "color": "green",
    "commands": [
      {
        "cmd": "Deploy em Vercel, Netlify",
        "desc": "Essas plataformas permitem que voc√™ hospede seu projeto React de forma gratuita e com integra√ß√£o cont√≠nua, facilitando o lan√ßamento de novas vers√µes e atualiza√ß√µes autom√°ticas a partir do reposit√≥rio."
      },
      {
        "cmd": "Vari√°veis de ambiente",
        "desc": "Configure chaves e vari√°veis sens√≠veis como APIs e tokens de forma segura usando arquivos `.env`. Isso separa configura√ß√µes de produ√ß√£o e desenvolvimento, evitando exposi√ß√µes acidentais de dados."
      },
      {
        "cmd": "PWA e SEO b√°sico",
        "desc": "Transforme sua aplica√ß√£o em um Progressive Web App (PWA), permitindo que ela funcione offline e seja instalada como um app no celular. Al√©m disso, configure tags b√°sicas de SEO (t√≠tulo, descri√ß√£o) para melhorar a visibilidade em motores de busca."
      }
    ]
  },
  {
    "number": 13,
    "emoji": "üåü",
    "title": "Avan√ßando Al√©m",
    "color": "pink",
    "commands": [
      {
        "cmd": "Next.js",
        "desc": "Um framework que combina React com Server-Side Rendering (SSR) e gera√ß√£o est√°tica de p√°ginas, melhorando a performance e o SEO do seu projeto. √â ideal para apps que precisam ser r√°pidos e amig√°veis a motores de busca."
      },
      {
        "cmd": "React Native",
        "desc": "Use a mesma base de React para criar aplicativos m√≥veis nativos para Android e iOS. Ideal para quem quer expandir o app web para o mobile, compartilhando l√≥gica e experi√™ncia de desenvolvimento."
      },
      {
        "cmd": "Frameworks modernos",
        "desc": "Explore novas ferramentas como Remix (com foco em performance e UX) e Astro (para sites est√°ticos e ultra r√°pidos), ampliando seu repert√≥rio de tecnologias e aprendizados."
      }
    ]
  },
  {
    "number": 14,
    "emoji": "üí°",
    "title": "Dicas Finais",
    "color": "gray",
    "commands": [
      {
        "cmd": "Pr√°tica constante",
        "desc": "A melhor forma de aprender e consolidar conceitos √© criar projetos reais: experimente ideias, refa√ßa exemplos e brinque com os conceitos para refor√ßar sua confian√ßa e criatividade no desenvolvimento."
      },
      {
        "cmd": "Projetos sugeridos",
        "desc": "Alguns exemplos de projetos simples, mas muito √∫teis para treinar: um To-Do List com adi√ß√£o e remo√ß√£o de tarefas; um app que consome dados de uma API e exibe resultados; ou a c√≥pia de alguma interface famosa para praticar estilos e responsividade."
      }
    ]
  }
]
