[
  {
    "number": 1,
    "emoji": "‚öõÔ∏è",
    "title": "Fundamentos do React",
    "color": "amber",
    "commands": [
      {
        "cmd": "React (SPA, Virtual DOM, JSX)",
        "desc": "React √© uma biblioteca JavaScript para construir interfaces de usu√°rio. SPA (Single Page Application) usa uma √∫nica p√°gina com navega√ß√£o din√¢mica. O Virtual DOM melhora a performance ao atualizar apenas o necess√°rio. JSX permite escrever HTML dentro do JavaScript."
      },
      {
        "cmd": "npx create-react-app meu-app / npm create vite@latest",
        "desc": "Cria um projeto React com toda configura√ß√£o inicial usando Create React App ou Vite."
      },
      {
        "cmd": "JSX + Babel",
        "desc": "JSX √© uma sintaxe parecida com HTML. Babel converte JSX para JavaScript puro que o navegador entende."
      },
      {
        "cmd": "function MeuComponente() { return <div>Ol√°</div>; }",
        "desc": "Componentes funcionais retornam JSX. S√£o fun√ß√µes puras que constroem blocos da interface."
      },
      {
        "cmd": "<Componente titulo='Ol√°'>{children}</Componente>",
        "desc": "Props s√£o dados passados a componentes. `children` representa os elementos internos."
      },
      {
        "cmd": "const [count, setCount] = useState(0);",
        "desc": "`useState` cria estados internos. `setCount` atualiza o valor e re-renderiza o componente."
      },
      {
        "cmd": "<button onClick={handleClick}>Clique</button>",
        "desc": "Eventos como `onClick` e `onChange` disparam fun√ß√µes dentro do JSX."
      },
      {
        "cmd": "{condicao ? <Sim /> : <Nao />}",
        "desc": "Renderiza√ß√£o condicional com tern√°rio ou `&&`. Mostra componentes conforme estado/props."
      },
      {
        "cmd": "array.map(item => <li key={item.id}>{item.nome}</li>)",
        "desc": "Para renderizar listas, use `.map()`. Cada item precisa de uma `key` √∫nica."
      }
    ]
  },
  {
    "number": 2,
    "emoji": "üü†",
    "title": "React Intermedi√°rio",
    "color": "orange",
    "commands": [
      {
        "cmd": "useEffect, useRef, useContext",
        "desc": "Hooks adicionais: `useEffect` lida com efeitos colaterais, `useRef` referencia elementos, `useContext` acessa contexto global."
      },
      {
        "cmd": "Componentes controlados x n√£o controlados",
        "desc": "Controlados: valor via state. N√£o controlados: valor via `ref`. Use controlados para melhor controle de formul√°rios."
      },
      {
        "cmd": "<form onSubmit={handleSubmit}>...</form>",
        "desc": "Formul√°rios com valida√ß√£o devem prevenir recarregamento (event.preventDefault) e validar dados no submit."
      },
      {
        "cmd": "CSS Modules / Styled Components / Tailwind",
        "desc": "Tr√™s formas de estilizar: CSS Modules para escopo local, Styled Components para JS, Tailwind para utilit√°rios."
      },
      {
        "cmd": "components/MeuComponente.jsx",
        "desc": "Organize componentes por pastas, com nomes claros e responsabilidade √∫nica."
      },
      {
        "cmd": "<Layout><Header /><Main /></Layout>",
        "desc": "Composi√ß√£o de componentes permite combinar e reutilizar blocos da UI de forma escal√°vel."
      },
      {
        "cmd": "useEffect(() => {...}, [dependencias])",
        "desc": "Simula ciclo de vida do componente: montar, atualizar e desmontar."
      }
    ]
  },
  {
    "number": 3,
    "emoji": "üîµ",
    "title": "React Avan√ßado",
    "color": "blue",
    "commands": [
      {
        "cmd": "React Router v6+",
        "desc": "Roteamento declarativo com `<Routes>`, `<Route>`, `useNavigate`, `useParams`. Suporte a rotas aninhadas."
      },
      {
        "cmd": "Context API + useReducer",
        "desc": "Gerencia estados globais com reducer para l√≥gica complexa. `dispatch` substitui `setState`."
      },
      {
        "cmd": "Lifting State Up",
        "desc": "Elevar o estado ao componente pai permite compartilhamento de dados entre filhos."
      },
      {
        "cmd": "useRef para DOM",
        "desc": "`useRef` acessa e manipula elementos DOM diretamente (focus, scroll etc)."
      },
      {
        "cmd": "Custom Hooks",
        "desc": "Encapsule l√≥gica reutiliz√°vel em fun√ß√µes como `useForm`, `useFetch`, etc."
      },
      {
        "cmd": "Error Boundaries",
        "desc": "Capturam erros de renderiza√ß√£o com componentes de classe usando `componentDidCatch`."
      },
      {
        "cmd": "Suspense + Lazy",
        "desc": "Importa√ß√£o din√¢mica com `React.lazy()` e fallback com `<Suspense>`."
      },
      {
        "cmd": "memo / useMemo / useCallback",
        "desc": "`memo` evita re-renderiza√ß√µes. `useMemo` memoriza valores. `useCallback` memoriza fun√ß√µes."
      }
    ]
  },
  {
    "number": 4,
    "emoji": "üî¥",
    "title": "Integra√ß√£o com Back-End",
    "color": "red",
    "commands": [
      {
        "cmd": "fetch / axios",
        "desc": "Ambos fazem requisi√ß√µes HTTP. Axios possui interceptadores, fetch √© nativo."
      },
      {
        "cmd": "REST API (GET, POST, PUT, DELETE)",
        "desc": "Comunique-se com back-end usando m√©todos HTTP para ler e alterar dados."
      },
      {
        "cmd": "CRUD completo",
        "desc": "Crie telas para listar, adicionar, editar e excluir dados com integra√ß√£o de APIs."
      },
      {
        "cmd": "Login / Logout",
        "desc": "Use forms + requisi√ß√µes para autenticar usu√°rios. Armazene o token ap√≥s login."
      },
      {
        "cmd": "localStorage / sessionStorage",
        "desc": "Persist√™ncia de dados no navegador. Ideal para tokens, prefer√™ncias, temas etc."
      }
    ]
  },
  {
    "number": 5,
    "emoji": "‚ö´",
    "title": "Testes em React",
    "color": "black",
    "commands": [
      {
        "cmd": "React Testing Library (RTL)",
        "desc": "Testa componentes de forma orientada ao usu√°rio. Usa queries como `getByText`, `getByRole`."
      },
      {
        "cmd": "Jest",
        "desc": "Framework de testes para JS/TS. Usado com RTL para testes unit√°rios e mocks."
      },
      {
        "cmd": "Teste de componentes",
        "desc": "Teste intera√ß√µes, renderiza√ß√£o, entradas e sa√≠das de componentes isolados."
      },
      {
        "cmd": "Teste de hooks",
        "desc": "Use `@testing-library/react-hooks` ou `renderHook` para testar l√≥gica dos hooks."
      }
    ]
  },
  {
    "number": 6,
    "emoji": "üü£",
    "title": "Gerenciamento de Estado Avan√ßado",
    "color": "purple",
    "commands": [
      {
        "cmd": "Redux / Zustand",
        "desc": "Redux oferece estrutura robusta e padr√£o. Zustand √© leve e simples, baseado em hooks."
      },
      {
        "cmd": "Redux Toolkit",
        "desc": "API oficial para simplificar Redux: `createSlice`, `configureStore`, `createAsyncThunk`."
      },
      {
        "cmd": "Context vs Redux",
        "desc": "Context √© ideal para dados simples e est√°ticos. Redux lida melhor com grandes fluxos e l√≥gica complexa."
      },
      {
        "cmd": "Redux DevTools",
        "desc": "Ferramenta para inspecionar e depurar a√ß√µes e estados em Redux."
      }
    ]
  },
  {
    "number": 7,
    "emoji": "‚ö™",
    "title": "Ferramentas e Boas Pr√°ticas",
    "color": "gray",
    "commands": [
      {
        "cmd": "ESLint + Prettier",
        "desc": "Padroniza e formata automaticamente o c√≥digo. Evita erros e melhora a leitura."
      },
      {
        "cmd": "PropTypes / TypeScript",
        "desc": "PropTypes valida props em JS. TypeScript fornece tipagem est√°tica para maior seguran√ßa."
      },
      {
        "cmd": "Git + versionamento",
        "desc": "Use Git para salvar vers√µes, trabalhar em equipe e manter hist√≥rico de altera√ß√µes."
      },
      {
        "cmd": "Deploy (Vercel / Netlify / GitHub Pages)",
        "desc": "Hospede seu app React gratuitamente com plataformas modernas e simples."
      },
      {
        "cmd": "CI/CD com GitHub Actions",
        "desc": "Automatize testes e deploy com GitHub Actions sempre que houver push no reposit√≥rio."
      }
    ]
  },
  {
    "number": 8,
    "emoji": "üü§",
    "title": "Extras e Profissionaliza√ß√£o",
    "color": "brown",
    "commands": [
      {
        "cmd": "Next.js (SSR)",
        "desc": "Framework baseado em React com suporte a Server Side Rendering e rotas autom√°ticas."
      },
      {
        "cmd": "React Native",
        "desc": "Construa apps mobile nativos com a mesma base do React para web."
      },
      {
        "cmd": "SEO com React",
        "desc": "React puro n√£o √© ideal para SEO. Use SSR (Next.js) ou pr√©-renderiza√ß√£o (Gatsby)."
      },
      {
        "cmd": "Design Patterns em React",
        "desc": "Use padr√µes como Container/Presentational, Hooks reutiliz√°veis e Render Props."
      },
      {
        "cmd": "Clean Code + Arquitetura",
        "desc": "Organize diret√≥rios por dom√≠nio, separe responsabilidades, evite c√≥digo duplicado e comente com clareza."
      },
      {
        "cmd": "Acessibilidade (ARIA)",
        "desc": "Implemente `aria-label`, `role`, foco naveg√°vel e contraste adequado para usu√°rios com defici√™ncia."
      }
    ]
  }
]